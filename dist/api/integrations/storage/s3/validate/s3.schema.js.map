{"version":3,"sources":["../../../../../../src/api/integrations/storage/s3/validate/s3.schema.ts"],"sourcesContent":["import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const s3Schema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    type: { type: 'string' },\n    messageId: { type: 'integer' },\n  },\n  ...isNotEmpty('id', 'type', 'messageId'),\n};\n\nexport const s3UrlSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    id: { type: 'string', pattern: '\\\\d+', minLength: 1 },\n    expiry: { type: 'string', pattern: '\\\\d+', minLength: 1 },\n  },\n  ...isNotEmpty('id'),\n  required: ['id'],\n};\n"],"mappings":"4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,cAAAE,EAAA,gBAAAC,IAAA,eAAAC,EAAAJ,GACA,IAAAK,EAAmB,gBAEbC,EAAa,IAAIC,IAAyC,CAC9D,IAAMC,EAAa,CAAC,EACpB,OAAAD,EAAc,QACXE,GACED,EAAWC,CAAQ,EAAI,CACtB,UAAW,EACX,YAAa,QAAQA,CAAQ,mBAC/B,CACJ,EACO,CACL,GAAI,CACF,cAAe,CACb,KAAM,CAAC,GAAGF,CAAa,CACzB,CACF,EACA,KAAM,CAAE,WAAAC,CAAW,CACrB,CACF,EAEaN,EAAwB,CACnC,OAAK,MAAG,EACR,KAAM,SACN,WAAY,CACV,GAAI,CAAE,KAAM,QAAS,EACrB,KAAM,CAAE,KAAM,QAAS,EACvB,UAAW,CAAE,KAAM,SAAU,CAC/B,EACA,GAAGI,EAAW,KAAM,OAAQ,WAAW,CACzC,EAEaH,EAA2B,CACtC,OAAK,MAAG,EACR,KAAM,SACN,WAAY,CACV,GAAI,CAAE,KAAM,SAAU,QAAS,OAAQ,UAAW,CAAE,EACpD,OAAQ,CAAE,KAAM,SAAU,QAAS,OAAQ,UAAW,CAAE,CAC1D,EACA,GAAGG,EAAW,IAAI,EAClB,SAAU,CAAC,IAAI,CACjB","names":["s3_schema_exports","__export","s3Schema","s3UrlSchema","__toCommonJS","import_uuid","isNotEmpty","propertyNames","properties","property"]}