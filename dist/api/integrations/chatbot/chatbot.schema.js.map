{"version":3,"sources":["../../../../src/api/integrations/chatbot/chatbot.schema.ts","../../../../src/api/integrations/chatbot/chatwoot/validate/chatwoot.schema.ts","../../../../src/api/integrations/chatbot/dify/validate/dify.schema.ts","../../../../src/api/integrations/chatbot/evolutionBot/validate/evolutionBot.schema.ts","../../../../src/api/integrations/chatbot/flowise/validate/flowise.schema.ts","../../../../src/api/integrations/chatbot/openai/validate/openai.schema.ts","../../../../src/api/integrations/chatbot/typebot/validate/typebot.schema.ts"],"sourcesContent":["export * from '@api/integrations/chatbot/chatwoot/validate/chatwoot.schema';\nexport * from '@api/integrations/chatbot/dify/validate/dify.schema';\nexport * from '@api/integrations/chatbot/evolutionBot/validate/evolutionBot.schema';\nexport * from '@api/integrations/chatbot/flowise/validate/flowise.schema';\nexport * from '@api/integrations/chatbot/openai/validate/openai.schema';\nexport * from '@api/integrations/chatbot/typebot/validate/typebot.schema';\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const chatwootSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    enabled: { type: 'boolean', enum: [true, false] },\n    accountId: { type: 'string' },\n    token: { type: 'string' },\n    url: { type: 'string' },\n    signMsg: { type: 'boolean', enum: [true, false] },\n    signDelimiter: { type: ['string', 'null'] },\n    nameInbox: { type: ['string', 'null'] },\n    reopenConversation: { type: 'boolean', enum: [true, false] },\n    conversationPending: { type: 'boolean', enum: [true, false] },\n    autoCreate: { type: 'boolean', enum: [true, false] },\n    importContacts: { type: 'boolean', enum: [true, false] },\n    mergeBrazilContacts: { type: 'boolean', enum: [true, false] },\n    importMessages: { type: 'boolean', enum: [true, false] },\n    daysLimitImportMessages: { type: 'number' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n  },\n  required: ['enabled', 'accountId', 'token', 'url', 'signMsg', 'reopenConversation', 'conversationPending'],\n  ...isNotEmpty('enabled', 'accountId', 'token', 'url', 'signMsg', 'reopenConversation', 'conversationPending'),\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const difySchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    enabled: { type: 'boolean' },\n    description: { type: 'string' },\n    botType: { type: 'string', enum: ['chatBot', 'textGenerator', 'agent', 'workflow'] },\n    apiUrl: { type: 'string' },\n    apiKey: { type: 'string' },\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\n    triggerValue: { type: 'string' },\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n    splitMessages: { type: 'boolean' },\n    timePerChar: { type: 'integer' },\n  },\n  required: ['enabled', 'botType', 'triggerType'],\n  ...isNotEmpty('enabled', 'botType', 'triggerType'),\n};\n\nexport const difyStatusSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\n  },\n  required: ['remoteJid', 'status'],\n  ...isNotEmpty('remoteJid', 'status'),\n};\n\nexport const difySettingSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n    difyIdFallback: { type: 'string' },\n    splitMessages: { type: 'boolean' },\n    timePerChar: { type: 'integer' },\n  },\n  required: [\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n    'splitMessages',\n    'timePerChar',\n  ],\n  ...isNotEmpty(\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n    'splitMessages',\n    'timePerChar',\n  ),\n};\n\nexport const difyIgnoreJidSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    action: { type: 'string', enum: ['add', 'remove'] },\n  },\n  required: ['remoteJid', 'action'],\n  ...isNotEmpty('remoteJid', 'action'),\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const evolutionBotSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    enabled: { type: 'boolean' },\n    description: { type: 'string' },\n    apiUrl: { type: 'string' },\n    apiKey: { type: 'string' },\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\n    triggerValue: { type: 'string' },\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n    splitMessages: { type: 'boolean' },\n    timePerChar: { type: 'integer' },\n  },\n  required: ['enabled', 'apiUrl', 'triggerType'],\n  ...isNotEmpty('enabled', 'apiUrl', 'triggerType'),\n};\n\nexport const evolutionBotStatusSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\n  },\n  required: ['remoteJid', 'status'],\n  ...isNotEmpty('remoteJid', 'status'),\n};\n\nexport const evolutionBotSettingSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n    botIdFallback: { type: 'string' },\n    splitMessages: { type: 'boolean' },\n    timePerChar: { type: 'integer' },\n  },\n  required: [\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n    'splitMessages',\n    'timePerChar',\n  ],\n  ...isNotEmpty(\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n    'splitMessages',\n    'timePerChar',\n  ),\n};\n\nexport const evolutionBotIgnoreJidSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    action: { type: 'string', enum: ['add', 'remove'] },\n  },\n  required: ['remoteJid', 'action'],\n  ...isNotEmpty('remoteJid', 'action'),\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const flowiseSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    enabled: { type: 'boolean' },\n    description: { type: 'string' },\n    apiUrl: { type: 'string' },\n    apiKey: { type: 'string' },\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\n    triggerValue: { type: 'string' },\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n  },\n  required: ['enabled', 'apiUrl', 'triggerType'],\n  ...isNotEmpty('enabled', 'apiUrl', 'triggerType'),\n};\n\nexport const flowiseStatusSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\n  },\n  required: ['remoteJid', 'status'],\n  ...isNotEmpty('remoteJid', 'status'),\n};\n\nexport const flowiseSettingSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n    botIdFallback: { type: 'string' },\n  },\n  required: [\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n  ],\n  ...isNotEmpty(\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n  ),\n};\n\nexport const flowiseIgnoreJidSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    action: { type: 'string', enum: ['add', 'remove'] },\n  },\n  required: ['remoteJid', 'action'],\n  ...isNotEmpty('remoteJid', 'action'),\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const openaiSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    enabled: { type: 'boolean' },\n    description: { type: 'string' },\n    openaiCredsId: { type: 'string' },\n    botType: { type: 'string', enum: ['assistant', 'chatCompletion'] },\n    assistantId: { type: 'string' },\n    functionUrl: { type: 'string' },\n    model: { type: 'string' },\n    systemMessages: { type: 'array', items: { type: 'string' } },\n    assistantMessages: { type: 'array', items: { type: 'string' } },\n    userMessages: { type: 'array', items: { type: 'string' } },\n    maxTokens: { type: 'integer' },\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\n    triggerValue: { type: 'string' },\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n  },\n  required: ['enabled', 'openaiCredsId', 'botType', 'triggerType'],\n  ...isNotEmpty('enabled', 'openaiCredsId', 'botType', 'triggerType'),\n};\n\nexport const openaiCredsSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    apiKey: { type: 'string' },\n  },\n  required: ['name', 'apiKey'],\n  ...isNotEmpty('name', 'apiKey'),\n};\n\nexport const openaiStatusSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\n  },\n  required: ['remoteJid', 'status'],\n  ...isNotEmpty('remoteJid', 'status'),\n};\n\nexport const openaiSettingSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    openaiCredsId: { type: 'string' },\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    speechToText: { type: 'boolean' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n    openaiIdFallback: { type: 'string' },\n  },\n  required: [\n    'openaiCredsId',\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n  ],\n  ...isNotEmpty(\n    'openaiCredsId',\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n  ),\n};\n\nexport const openaiIgnoreJidSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    action: { type: 'string', enum: ['add', 'remove'] },\n  },\n  required: ['remoteJid', 'action'],\n  ...isNotEmpty('remoteJid', 'action'),\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const typebotSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    enabled: { type: 'boolean' },\n    description: { type: 'string' },\n    url: { type: 'string' },\n    typebot: { type: 'string' },\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\n    triggerValue: { type: 'string' },\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n  },\n  required: ['enabled', 'url', 'typebot', 'triggerType'],\n  ...isNotEmpty('enabled', 'url', 'typebot', 'triggerType'),\n};\n\nexport const typebotStatusSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\n  },\n  required: ['remoteJid', 'status'],\n  ...isNotEmpty('remoteJid', 'status'),\n};\n\nexport const typebotStartSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    url: { type: 'string' },\n    typebot: { type: 'string' },\n  },\n  required: ['remoteJid', 'url', 'typebot'],\n  ...isNotEmpty('remoteJid', 'url', 'typebot'),\n};\n\nexport const typebotSettingSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    typebotIdFallback: { type: 'string' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n  },\n  required: ['expire', 'keywordFinish', 'delayMessage', 'unknownMessage', 'listeningFromMe', 'stopBotFromMe'],\n  ...isNotEmpty('expire', 'keywordFinish', 'delayMessage', 'unknownMessage', 'listeningFromMe', 'stopBotFromMe'),\n};\n\nexport const typebotIgnoreJidSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    action: { type: 'string', enum: ['add', 'remove'] },\n  },\n  required: ['remoteJid', 'action'],\n  ...isNotEmpty('remoteJid', 'action'),\n};\n"],"mappings":"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","names":["chatbot_schema_exports","__export","chatwootSchema","difyIgnoreJidSchema","difySchema","difySettingSchema","difyStatusSchema","evolutionBotIgnoreJidSchema","evolutionBotSchema","evolutionBotSettingSchema","evolutionBotStatusSchema","flowiseIgnoreJidSchema","flowiseSchema","flowiseSettingSchema","flowiseStatusSchema","openaiCredsSchema","openaiIgnoreJidSchema","openaiSchema","openaiSettingSchema","openaiStatusSchema","typebotIgnoreJidSchema","typebotSchema","typebotSettingSchema","typebotStartSchema","typebotStatusSchema","__toCommonJS","import_uuid","isNotEmpty","propertyNames","properties","property","chatwootSchema","import_uuid","isNotEmpty","propertyNames","properties","property","difySchema","difyStatusSchema","difySettingSchema","difyIgnoreJidSchema","import_uuid","isNotEmpty","propertyNames","properties","property","evolutionBotSchema","evolutionBotStatusSchema","evolutionBotSettingSchema","evolutionBotIgnoreJidSchema","import_uuid","isNotEmpty","propertyNames","properties","property","flowiseSchema","flowiseStatusSchema","flowiseSettingSchema","flowiseIgnoreJidSchema","import_uuid","isNotEmpty","propertyNames","properties","property","openaiSchema","openaiCredsSchema","openaiStatusSchema","openaiSettingSchema","openaiIgnoreJidSchema","import_uuid","isNotEmpty","propertyNames","properties","property","typebotSchema","typebotStatusSchema","typebotStartSchema","typebotSettingSchema","typebotIgnoreJidSchema"]}