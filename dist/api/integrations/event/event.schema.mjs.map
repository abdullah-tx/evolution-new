{"version":3,"sources":["../../../../src/api/integrations/event/event.schema.ts","../../../../src/api/integrations/event/event.controller.ts","../../../../src/api/integrations/event/pusher/pusher.schema.ts","../../../../src/api/integrations/event/webhook/webhook.schema.ts"],"sourcesContent":["import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nimport { EventController } from './event.controller';\n\nexport * from '@api/integrations/event/pusher/pusher.schema';\nexport * from '@api/integrations/event/webhook/webhook.schema';\n\nexport const eventSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    websocket: {\n      $ref: '#/$defs/event',\n    },\n    rabbitmq: {\n      $ref: '#/$defs/event',\n    },\n    sqs: {\n      $ref: '#/$defs/event',\n    },\n  },\n  $defs: {\n    event: {\n      type: 'object',\n      properties: {\n        enabled: { type: 'boolean', enum: [true, false] },\n        events: {\n          type: 'array',\n          minItems: 0,\n          items: {\n            type: 'string',\n            enum: EventController.events,\n          },\n        },\n      },\n      required: ['enabled'],\n    },\n  },\n};\n","import { EventDto } from '@api/integrations/event/event.dto';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { wa } from '@api/types/wa.types';\n\nexport type EmitData = {\n  instanceName: string;\n  origin: string;\n  event: string;\n  data: any;\n  serverUrl: string;\n  dateTime: string;\n  sender: string;\n  apiKey?: string;\n  local?: boolean;\n};\n\nexport interface EventControllerInterface {\n  set(instanceName: string, data: any): Promise<any>;\n  get(instanceName: string): Promise<any>;\n  emit({ instanceName, origin, event, data, serverUrl, dateTime, sender, apiKey, local }: EmitData): Promise<void>;\n}\n\nexport class EventController {\n  public prismaRepository: PrismaRepository;\n  private waMonitor: WAMonitoringService;\n  private integrationStatus: boolean;\n  private integrationName: string;\n\n  constructor(\n    prismaRepository: PrismaRepository,\n    waMonitor: WAMonitoringService,\n    integrationStatus: boolean,\n    integrationName: string,\n  ) {\n    this.prisma = prismaRepository;\n    this.monitor = waMonitor;\n    this.status = integrationStatus;\n    this.name = integrationName;\n  }\n\n  public set prisma(prisma: PrismaRepository) {\n    this.prismaRepository = prisma;\n  }\n\n  public get prisma() {\n    return this.prismaRepository;\n  }\n\n  public set monitor(waMonitor: WAMonitoringService) {\n    this.waMonitor = waMonitor;\n  }\n\n  public get monitor() {\n    return this.waMonitor;\n  }\n\n  public set name(name: string) {\n    this.integrationName = name;\n  }\n\n  public get name() {\n    return this.integrationName;\n  }\n\n  public set status(status: boolean) {\n    this.integrationStatus = status;\n  }\n\n  public get status() {\n    return this.integrationStatus;\n  }\n\n  public async set(instanceName: string, data: EventDto): Promise<wa.LocalEvent> {\n    if (!this.status) {\n      return;\n    }\n\n    if (!data[this.name]?.enabled) {\n      data[this.name].events = [];\n    } else {\n      if (0 === data[this.name].events.length) {\n        data[this.name].events = EventController.events;\n      }\n    }\n\n    return this.prisma[this.name].upsert({\n      where: {\n        instanceId: this.monitor.waInstances[instanceName].instanceId,\n      },\n      update: {\n        enabled: data[this.name]?.enabled,\n        events: data[this.name].events,\n      },\n      create: {\n        enabled: data[this.name]?.enabled,\n        events: data[this.name].events,\n        instanceId: this.monitor.waInstances[instanceName].instanceId,\n      },\n    });\n  }\n\n  public async get(instanceName: string): Promise<wa.LocalEvent> {\n    if (!this.status) {\n      return;\n    }\n\n    if (undefined === this.monitor.waInstances[instanceName]) {\n      return null;\n    }\n\n    const data = await this.prisma[this.name].findUnique({\n      where: {\n        instanceId: this.monitor.waInstances[instanceName].instanceId,\n      },\n    });\n\n    if (!data) {\n      return null;\n    }\n\n    return data;\n  }\n\n  public static readonly events = [\n    'APPLICATION_STARTUP',\n    'QRCODE_UPDATED',\n    'MESSAGES_SET',\n    'MESSAGES_UPSERT',\n    'MESSAGES_EDITED',\n    'MESSAGES_UPDATE',\n    'MESSAGES_DELETE',\n    'SEND_MESSAGE',\n    'CONTACTS_SET',\n    'CONTACTS_UPSERT',\n    'CONTACTS_UPDATE',\n    'PRESENCE_UPDATE',\n    'CHATS_SET',\n    'CHATS_UPSERT',\n    'CHATS_UPDATE',\n    'CHATS_DELETE',\n    'GROUPS_UPSERT',\n    'GROUP_UPDATE',\n    'GROUP_PARTICIPANTS_UPDATE',\n    'CONNECTION_UPDATE',\n    'LABELS_EDIT',\n    'LABELS_ASSOCIATION',\n    'CALL',\n    'TYPEBOT_START',\n    'TYPEBOT_CHANGE_STATUS',\n    'REMOVE_INSTANCE',\n    'LOGOUT_INSTANCE',\n  ];\n}\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nimport { EventController } from '../event.controller';\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\nexport const pusherSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    pusher: {\n      type: 'object',\n      properties: {\n        enabled: { type: 'boolean' },\n        appId: { type: 'string' },\n        key: { type: 'string' },\n        secret: { type: 'string' },\n        cluster: { type: 'string' },\n        useTLS: { type: 'boolean' },\n        events: {\n          type: 'array',\n          minItems: 0,\n          items: {\n            type: 'string',\n            enum: EventController.events,\n          },\n        },\n      },\n      required: ['enabled', 'appId', 'key', 'secret', 'cluster', 'useTLS'],\n      ...isNotEmpty('enabled', 'appId', 'key', 'secret', 'cluster', 'useTLS'),\n    },\n  },\n  required: ['pusher'],\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nimport { EventController } from '../event.controller';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const webhookSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    webhook: {\n      type: 'object',\n      properties: {\n        enabled: { type: 'boolean' },\n        url: { type: 'string' },\n        headers: { type: 'object' },\n        byEvents: { type: 'boolean' },\n        base64: { type: 'boolean' },\n        events: {\n          type: 'array',\n          minItems: 0,\n          items: {\n            type: 'string',\n            enum: EventController.events,\n          },\n        },\n      },\n      required: ['enabled', 'url'],\n      ...isNotEmpty('enabled', 'url'),\n    },\n  },\n  required: ['webhook'],\n};\n"],"mappings":"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","names":["v4","_EventController","prismaRepository","waMonitor","integrationStatus","integrationName","prisma","name","status","instanceName","data","EventController","v4","isNotEmpty","propertyNames","properties","property","pusherSchema","v4","EventController","v4","isNotEmpty","propertyNames","properties","property","webhookSchema","v4","EventController","eventSchema","v4","EventController"]}