{"version":3,"sources":["../../src/validate/group.schema.ts"],"sourcesContent":["import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const createGroupSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    subject: { type: 'string' },\n    description: { type: 'string' },\n    profilePicture: { type: 'string' },\n    promoteParticipants: { type: 'boolean', enum: [true, false] },\n    participants: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        minLength: 10,\n        pattern: '\\\\d+',\n        description: '\"participants\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['subject', 'participants'],\n  ...isNotEmpty('subject', 'description', 'profilePicture'),\n};\n\nexport const groupJidSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string', pattern: '^[\\\\d-]+@g.us$' },\n  },\n  required: ['groupJid'],\n  ...isNotEmpty('groupJid'),\n};\n\nexport const getParticipantsSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    getParticipants: { type: 'string', enum: ['true', 'false'] },\n  },\n  required: ['getParticipants'],\n  ...isNotEmpty('getParticipants'),\n};\n\nexport const groupSendInviteSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    description: { type: 'string' },\n    numbers: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        minLength: 10,\n        pattern: '\\\\d+',\n        description: '\"numbers\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['groupJid', 'description', 'numbers'],\n  ...isNotEmpty('groupJid', 'description', 'numbers'),\n};\n\nexport const groupInviteSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    inviteCode: { type: 'string', pattern: '^[a-zA-Z0-9]{22}$' },\n  },\n  required: ['inviteCode'],\n  ...isNotEmpty('inviteCode'),\n};\n\nexport const AcceptGroupInviteSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    inviteCode: { type: 'string', pattern: '^[a-zA-Z0-9]{22}$' },\n  },\n  required: ['inviteCode'],\n  ...isNotEmpty('inviteCode'),\n};\n\nexport const updateParticipantsSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    action: {\n      type: 'string',\n      enum: ['add', 'remove', 'promote', 'demote'],\n    },\n    participants: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        minLength: 10,\n        pattern: '\\\\d+',\n        description: '\"participants\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['groupJid', 'action', 'participants'],\n  ...isNotEmpty('groupJid', 'action'),\n};\n\nexport const updateSettingsSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    action: {\n      type: 'string',\n      enum: ['announcement', 'not_announcement', 'locked', 'unlocked'],\n    },\n  },\n  required: ['groupJid', 'action'],\n  ...isNotEmpty('groupJid', 'action'),\n};\n\nexport const toggleEphemeralSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    expiration: {\n      type: 'number',\n      enum: [0, 86400, 604800, 7776000],\n    },\n  },\n  required: ['groupJid', 'expiration'],\n  ...isNotEmpty('groupJid', 'expiration'),\n};\n\nexport const updateGroupPictureSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    image: { type: 'string' },\n  },\n  required: ['groupJid', 'image'],\n  ...isNotEmpty('groupJid', 'image'),\n};\n\nexport const updateGroupSubjectSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    subject: { type: 'string' },\n  },\n  required: ['groupJid', 'subject'],\n  ...isNotEmpty('groupJid', 'subject'),\n};\n\nexport const updateGroupDescriptionSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    description: { type: 'string' },\n  },\n  required: ['groupJid', 'description'],\n  ...isNotEmpty('groupJid', 'description'),\n};\n"],"mappings":"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","names":["v4","isNotEmpty","propertyNames","properties","property","createGroupSchema","groupJidSchema","getParticipantsSchema","groupSendInviteSchema","groupInviteSchema","AcceptGroupInviteSchema","updateParticipantsSchema","updateSettingsSchema","toggleEphemeralSchema","updateGroupPictureSchema","updateGroupSubjectSchema","updateGroupDescriptionSchema"]}