{"version":3,"sources":["../../src/validate/settings.schema.ts"],"sourcesContent":["import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const settingsSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    rejectCall: { type: 'boolean' },\n    msgCall: { type: 'string' },\n    groupsIgnore: { type: 'boolean' },\n    alwaysOnline: { type: 'boolean' },\n    readMessages: { type: 'boolean' },\n    readStatus: { type: 'boolean' },\n    syncFullHistory: { type: 'boolean' },\n  },\n  required: ['rejectCall', 'groupsIgnore', 'alwaysOnline', 'readMessages', 'readStatus', 'syncFullHistory'],\n  ...isNotEmpty('rejectCall', 'groupsIgnore', 'alwaysOnline', 'readMessages', 'readStatus', 'syncFullHistory'),\n};\n"],"mappings":"4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,oBAAAE,IAAA,eAAAC,EAAAH,GACA,IAAAI,EAAmB,gBAEbC,EAAa,IAAIC,IAAyC,CAC9D,IAAMC,EAAa,CAAC,EACpB,OAAAD,EAAc,QACXE,GACED,EAAWC,CAAQ,EAAI,CACtB,UAAW,EACX,YAAa,QAAQA,CAAQ,mBAC/B,CACJ,EACO,CACL,GAAI,CACF,cAAe,CACb,KAAM,CAAC,GAAGF,CAAa,CACzB,CACF,EACA,KAAM,CAAE,WAAAC,CAAW,CACrB,CACF,EAEaL,EAA8B,CACzC,OAAK,MAAG,EACR,KAAM,SACN,WAAY,CACV,WAAY,CAAE,KAAM,SAAU,EAC9B,QAAS,CAAE,KAAM,QAAS,EAC1B,aAAc,CAAE,KAAM,SAAU,EAChC,aAAc,CAAE,KAAM,SAAU,EAChC,aAAc,CAAE,KAAM,SAAU,EAChC,WAAY,CAAE,KAAM,SAAU,EAC9B,gBAAiB,CAAE,KAAM,SAAU,CACrC,EACA,SAAU,CAAC,aAAc,eAAgB,eAAgB,eAAgB,aAAc,iBAAiB,EACxG,GAAGG,EAAW,aAAc,eAAgB,eAAgB,eAAgB,aAAc,iBAAiB,CAC7G","names":["settings_schema_exports","__export","settingsSchema","__toCommonJS","import_uuid","isNotEmpty","propertyNames","properties","property"]}