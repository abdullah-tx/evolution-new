{"version":3,"sources":["../../src/validate/instance.schema.ts","../../src/api/types/wa.types.ts"],"sourcesContent":["import { Integration } from '@api/types/wa.types';\nimport { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const instanceSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    // Instance\n    instanceName: { type: 'string' },\n    token: { type: 'string' },\n    number: { type: 'string', pattern: '^\\\\d+[\\\\.@\\\\w-]+' },\n    businessId: { type: 'string' },\n    qrcode: { type: 'boolean' },\n    Integration: {\n      type: 'string',\n      enum: Object.values(Integration),\n    },\n    // Settings\n    rejectCall: { type: 'boolean' },\n    msgCall: { type: 'string' },\n    groupsIgnore: { type: 'boolean' },\n    alwaysOnline: { type: 'boolean' },\n    readMessages: { type: 'boolean' },\n    readStatus: { type: 'boolean' },\n    syncFullHistory: { type: 'boolean' },\n    // Proxy\n    proxyHost: { type: 'string' },\n    proxyPort: { type: 'string' },\n    proxyProtocol: { type: 'string' },\n    proxyUsername: { type: 'string' },\n    proxyPassword: { type: 'string' },\n    // Webhook\n    webhookUrl: { type: 'string' },\n    webhookByEvents: { type: 'boolean' },\n    webhookBase64: { type: 'boolean' },\n    webhookEvents: {\n      type: 'array',\n      minItems: 0,\n      items: {\n        type: 'string',\n        enum: [\n          'APPLICATION_STARTUP',\n          'QRCODE_UPDATED',\n          'MESSAGES_SET',\n          'MESSAGES_UPSERT',\n          'MESSAGES_EDITED',\n          'MESSAGES_UPDATE',\n          'MESSAGES_DELETE',\n          'SEND_MESSAGE',\n          'CONTACTS_SET',\n          'CONTACTS_UPSERT',\n          'CONTACTS_UPDATE',\n          'PRESENCE_UPDATE',\n          'CHATS_SET',\n          'CHATS_UPSERT',\n          'CHATS_UPDATE',\n          'CHATS_DELETE',\n          'GROUPS_UPSERT',\n          'GROUP_UPDATE',\n          'GROUP_PARTICIPANTS_UPDATE',\n          'CONNECTION_UPDATE',\n          'LABELS_EDIT',\n          'LABELS_ASSOCIATION',\n          'CALL',\n          'TYPEBOT_START',\n          'TYPEBOT_CHANGE_STATUS',\n        ],\n      },\n    },\n    // RabbitMQ\n    rabbitmqEnabled: { type: 'boolean' },\n    rabbitmqEvents: {\n      type: 'array',\n      minItems: 0,\n      items: {\n        type: 'string',\n        enum: [\n          'APPLICATION_STARTUP',\n          'QRCODE_UPDATED',\n          'MESSAGES_SET',\n          'MESSAGES_UPSERT',\n          'MESSAGES_EDITED',\n          'MESSAGES_UPDATE',\n          'MESSAGES_DELETE',\n          'SEND_MESSAGE',\n          'CONTACTS_SET',\n          'CONTACTS_UPSERT',\n          'CONTACTS_UPDATE',\n          'PRESENCE_UPDATE',\n          'CHATS_SET',\n          'CHATS_UPSERT',\n          'CHATS_UPDATE',\n          'CHATS_DELETE',\n          'GROUPS_UPSERT',\n          'GROUP_UPDATE',\n          'GROUP_PARTICIPANTS_UPDATE',\n          'CONNECTION_UPDATE',\n          'LABELS_EDIT',\n          'LABELS_ASSOCIATION',\n          'CALL',\n          'TYPEBOT_START',\n          'TYPEBOT_CHANGE_STATUS',\n        ],\n      },\n    },\n    // SQS\n    sqsEnabled: { type: 'boolean' },\n    sqsEvents: {\n      type: 'array',\n      minItems: 0,\n      items: {\n        type: 'string',\n        enum: [\n          'APPLICATION_STARTUP',\n          'QRCODE_UPDATED',\n          'MESSAGES_SET',\n          'MESSAGES_UPSERT',\n          'MESSAGES_EDITED',\n          'MESSAGES_UPDATE',\n          'MESSAGES_DELETE',\n          'SEND_MESSAGE',\n          'CONTACTS_SET',\n          'CONTACTS_UPSERT',\n          'CONTACTS_UPDATE',\n          'PRESENCE_UPDATE',\n          'CHATS_SET',\n          'CHATS_UPSERT',\n          'CHATS_UPDATE',\n          'CHATS_DELETE',\n          'GROUPS_UPSERT',\n          'GROUP_UPDATE',\n          'GROUP_PARTICIPANTS_UPDATE',\n          'CONNECTION_UPDATE',\n          'LABELS_EDIT',\n          'LABELS_ASSOCIATION',\n          'CALL',\n          'TYPEBOT_START',\n          'TYPEBOT_CHANGE_STATUS',\n        ],\n      },\n    },\n    // Chatwoot\n    chatwootAccountId: { type: 'string' },\n    chatwootToken: { type: 'string' },\n    chatwootUrl: { type: 'string' },\n    chatwootSignMsg: { type: 'boolean' },\n    chatwootReopenConversation: { type: 'boolean' },\n    chatwootConversationPending: { type: 'boolean' },\n    chatwootImportContacts: { type: 'boolean' },\n    chatwootNameInbox: { type: 'string' },\n    chatwootMergeBrazilContacts: { type: 'boolean' },\n    chatwootImportMessages: { type: 'boolean' },\n    chatwootDaysLimitImportMessages: { type: 'number' },\n  },\n  ...isNotEmpty('instanceName'),\n};\n\nexport const presenceOnlySchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    presence: {\n      type: 'string',\n      enum: ['unavailable', 'available', 'composing', 'recording', 'paused'],\n    },\n  },\n  required: ['presence'],\n};\n","/* eslint-disable @typescript-eslint/no-namespace */\nimport { JsonValue } from '@prisma/client/runtime/library';\nimport { AuthenticationState, WAConnectionState } from 'baileys';\n\nexport enum Events {\n  APPLICATION_STARTUP = 'application.startup',\n  INSTANCE_CREATE = 'instance.create',\n  INSTANCE_DELETE = 'instance.delete',\n  QRCODE_UPDATED = 'qrcode.updated',\n  CONNECTION_UPDATE = 'connection.update',\n  STATUS_INSTANCE = 'status.instance',\n  MESSAGES_SET = 'messages.set',\n  MESSAGES_UPSERT = 'messages.upsert',\n  MESSAGES_EDITED = 'messages.edited',\n  MESSAGES_UPDATE = 'messages.update',\n  MESSAGES_DELETE = 'messages.delete',\n  SEND_MESSAGE = 'send.message',\n  CONTACTS_SET = 'contacts.set',\n  CONTACTS_UPSERT = 'contacts.upsert',\n  CONTACTS_UPDATE = 'contacts.update',\n  PRESENCE_UPDATE = 'presence.update',\n  CHATS_SET = 'chats.set',\n  CHATS_UPDATE = 'chats.update',\n  CHATS_UPSERT = 'chats.upsert',\n  CHATS_DELETE = 'chats.delete',\n  GROUPS_UPSERT = 'groups.upsert',\n  GROUPS_UPDATE = 'groups.update',\n  GROUP_PARTICIPANTS_UPDATE = 'group-participants.update',\n  CALL = 'call',\n  TYPEBOT_START = 'typebot.start',\n  TYPEBOT_CHANGE_STATUS = 'typebot.change-status',\n  LABELS_EDIT = 'labels.edit',\n  LABELS_ASSOCIATION = 'labels.association',\n  CREDS_UPDATE = 'creds.update',\n  MESSAGING_HISTORY_SET = 'messaging-history.set',\n  REMOVE_INSTANCE = 'remove.instance',\n  LOGOUT_INSTANCE = 'logout.instance',\n}\n\nexport declare namespace wa {\n  export type QrCode = {\n    count?: number;\n    pairingCode?: string;\n    base64?: string;\n    code?: string;\n  };\n\n  export type Instance = {\n    id?: string;\n    qrcode?: QrCode;\n    pairingCode?: string;\n    authState?: { state: AuthenticationState; saveCreds: () => void };\n    name?: string;\n    wuid?: string;\n    profileName?: string;\n    profilePictureUrl?: string;\n    token?: string;\n    number?: string;\n    integration?: string;\n    businessId?: string;\n  };\n\n  export type LocalChatwoot = {\n    enabled?: boolean;\n    accountId?: string;\n    token?: string;\n    url?: string;\n    nameInbox?: string;\n    signMsg?: boolean;\n    signDelimiter?: string;\n    number?: string;\n    reopenConversation?: boolean;\n    conversationPending?: boolean;\n    mergeBrazilContacts?: boolean;\n    importContacts?: boolean;\n    importMessages?: boolean;\n    daysLimitImportMessages?: number;\n  };\n\n  export type LocalSettings = {\n    rejectCall?: boolean;\n    msgCall?: string;\n    groupsIgnore?: boolean;\n    alwaysOnline?: boolean;\n    readMessages?: boolean;\n    readStatus?: boolean;\n    syncFullHistory?: boolean;\n  };\n\n  export type LocalEvent = {\n    enabled?: boolean;\n    events?: JsonValue;\n  };\n\n  export type LocalWebHook = LocalEvent & {\n    url?: string;\n    headers?: JsonValue;\n    webhookByEvents?: boolean;\n    webhookBase64?: boolean;\n  };\n\n  export type LocalPusher = LocalEvent & {\n    appId?: string;\n    key?: string;\n    secret?: string;\n    cluster?: string;\n    useTLS?: boolean;\n  };\n\n  type Session = {\n    remoteJid?: string;\n    sessionId?: string;\n    createdAt?: number;\n  };\n\n  export type LocalProxy = {\n    enabled?: boolean;\n    host?: string;\n    port?: string;\n    protocol?: string;\n    username?: string;\n    password?: string;\n  };\n\n  export type StateConnection = {\n    instance?: string;\n    state?: WAConnectionState | 'refused';\n    statusReason?: number;\n  };\n\n  export type StatusMessage = 'ERROR' | 'PENDING' | 'SERVER_ACK' | 'DELIVERY_ACK' | 'READ' | 'DELETED' | 'PLAYED';\n}\n\nexport const TypeMediaMessage = ['imageMessage', 'documentMessage', 'audioMessage', 'videoMessage', 'stickerMessage', 'ptvMessage'];\n\nexport const MessageSubtype = [\n  'ephemeralMessage',\n  'documentWithCaptionMessage',\n  'viewOnceMessage',\n  'viewOnceMessageV2',\n];\n\nexport const Integration = {\n  WHATSAPP_BUSINESS: 'WHATSAPP-BUSINESS',\n  WHATSAPP_BAILEYS: 'WHATSAPP-BAILEYS',\n  EVOLUTION: 'EVOLUTION',\n};\n"],"mappings":"4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,oBAAAE,EAAA,uBAAAC,IAAA,eAAAC,EAAAJ,GC8IO,IAAMK,EAAc,CACzB,kBAAmB,oBACnB,iBAAkB,mBAClB,UAAW,WACb,EDhJA,IAAAC,EAAmB,gBAEbC,EAAa,IAAIC,IAAyC,CAC9D,IAAMC,EAAa,CAAC,EACpB,OAAAD,EAAc,QACXE,GACED,EAAWC,CAAQ,EAAI,CACtB,UAAW,EACX,YAAa,QAAQA,CAAQ,mBAC/B,CACJ,EACO,CACL,GAAI,CACF,cAAe,CACb,KAAM,CAAC,GAAGF,CAAa,CACzB,CACF,EACA,KAAM,CAAE,WAAAC,CAAW,CACrB,CACF,EAEaE,EAA8B,CACzC,OAAK,MAAG,EACR,KAAM,SACN,WAAY,CAEV,aAAc,CAAE,KAAM,QAAS,EAC/B,MAAO,CAAE,KAAM,QAAS,EACxB,OAAQ,CAAE,KAAM,SAAU,QAAS,kBAAmB,EACtD,WAAY,CAAE,KAAM,QAAS,EAC7B,OAAQ,CAAE,KAAM,SAAU,EAC1B,YAAa,CACX,KAAM,SACN,KAAM,OAAO,OAAOC,CAAW,CACjC,EAEA,WAAY,CAAE,KAAM,SAAU,EAC9B,QAAS,CAAE,KAAM,QAAS,EAC1B,aAAc,CAAE,KAAM,SAAU,EAChC,aAAc,CAAE,KAAM,SAAU,EAChC,aAAc,CAAE,KAAM,SAAU,EAChC,WAAY,CAAE,KAAM,SAAU,EAC9B,gBAAiB,CAAE,KAAM,SAAU,EAEnC,UAAW,CAAE,KAAM,QAAS,EAC5B,UAAW,CAAE,KAAM,QAAS,EAC5B,cAAe,CAAE,KAAM,QAAS,EAChC,cAAe,CAAE,KAAM,QAAS,EAChC,cAAe,CAAE,KAAM,QAAS,EAEhC,WAAY,CAAE,KAAM,QAAS,EAC7B,gBAAiB,CAAE,KAAM,SAAU,EACnC,cAAe,CAAE,KAAM,SAAU,EACjC,cAAe,CACb,KAAM,QACN,SAAU,EACV,MAAO,CACL,KAAM,SACN,KAAM,CACJ,sBACA,iBACA,eACA,kBACA,kBACA,kBACA,kBACA,eACA,eACA,kBACA,kBACA,kBACA,YACA,eACA,eACA,eACA,gBACA,eACA,4BACA,oBACA,cACA,qBACA,OACA,gBACA,uBACF,CACF,CACF,EAEA,gBAAiB,CAAE,KAAM,SAAU,EACnC,eAAgB,CACd,KAAM,QACN,SAAU,EACV,MAAO,CACL,KAAM,SACN,KAAM,CACJ,sBACA,iBACA,eACA,kBACA,kBACA,kBACA,kBACA,eACA,eACA,kBACA,kBACA,kBACA,YACA,eACA,eACA,eACA,gBACA,eACA,4BACA,oBACA,cACA,qBACA,OACA,gBACA,uBACF,CACF,CACF,EAEA,WAAY,CAAE,KAAM,SAAU,EAC9B,UAAW,CACT,KAAM,QACN,SAAU,EACV,MAAO,CACL,KAAM,SACN,KAAM,CACJ,sBACA,iBACA,eACA,kBACA,kBACA,kBACA,kBACA,eACA,eACA,kBACA,kBACA,kBACA,YACA,eACA,eACA,eACA,gBACA,eACA,4BACA,oBACA,cACA,qBACA,OACA,gBACA,uBACF,CACF,CACF,EAEA,kBAAmB,CAAE,KAAM,QAAS,EACpC,cAAe,CAAE,KAAM,QAAS,EAChC,YAAa,CAAE,KAAM,QAAS,EAC9B,gBAAiB,CAAE,KAAM,SAAU,EACnC,2BAA4B,CAAE,KAAM,SAAU,EAC9C,4BAA6B,CAAE,KAAM,SAAU,EAC/C,uBAAwB,CAAE,KAAM,SAAU,EAC1C,kBAAmB,CAAE,KAAM,QAAS,EACpC,4BAA6B,CAAE,KAAM,SAAU,EAC/C,uBAAwB,CAAE,KAAM,SAAU,EAC1C,gCAAiC,CAAE,KAAM,QAAS,CACpD,EACA,GAAGL,EAAW,cAAc,CAC9B,EAEaM,EAAkC,CAC7C,OAAK,MAAG,EACR,KAAM,SACN,WAAY,CACV,SAAU,CACR,KAAM,SACN,KAAM,CAAC,cAAe,YAAa,YAAa,YAAa,QAAQ,CACvE,CACF,EACA,SAAU,CAAC,UAAU,CACvB","names":["instance_schema_exports","__export","instanceSchema","presenceOnlySchema","__toCommonJS","Integration","import_uuid","isNotEmpty","propertyNames","properties","property","instanceSchema","Integration","presenceOnlySchema"]}